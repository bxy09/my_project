#!/usr/bin/perl -w
use warnings;
use strict;
use MongoDB;
use MongoDB::OID;
use Test::Parser::Sar;
use Data::Dumper;
use POSIX;
use JSON;
%DB::package = ('main' => 1,
                  'MongoDB::collection::find' => 1,
									'MongoDB::collection::count' => 1);
my $conn = MongoDB::Connection->new;
my @signal_clusters = (
							{db=>'Job_signal',num=>8},
							#{db=>'Sar_signal',num=>181},
							#{db=>'lim',num=>7},
							{db=>'pim',num=>1},
							{db=>'res',num=>15},
							{db=>'sbatchd',num=>20},
							{db=>'messages',num=>2}
							);
my @nodes;#todo
my $node_list_path = shift @ARGV;
open NODE,"<$node_list_path" or die "can't open nodelist:$node_list_path";
while(<NODE>) {
	s/\r\n//;
	push @nodes,$_;
}
#get signal_list
my @signals = ();
foreach my $signal_cluster(@signal_clusters){
	my $num = $signal_cluster->{num};
	my $db_handle = MongoDB::Connection->new()->get_database($signal_cluster->{db});
	foreach (0..($num-1)) {
		push @signals,{handle=>$db_handle,tempID=>$_,db=>$signal_cluster->{db}};
	}
}
#foreach signal*signal calc num and cov_num
my $cov_count = [];
my $count = [];
for my $i(0..$#signals) {
	print "calc:signal $i\n";
#get signal num
	my $c_count = 0;
	my $i_handle = $signals[$i]->{handle};
	my $i_tempID = $signals[$i]->{tempID};
	my %i_cache;
	foreach my $node(@nodes){
		$c_count += $i_handle->get_collection($node)->count({'tempID'=>$i_tempID});
	}
	push @$count,$c_count;
	my $c_cov = [];
	for my $j(0..$#signals) {
#		die if($j ==5);
		print "\tcalc:signal $j $signals[$j]->{db} $signals[$j]->{tempID}\n";
		#get cov_signal_num
		if($j == $i) {
			push @$c_cov,0;
			next;
		}
		my $c_cov_cell = 0;
		foreach my $node(@nodes){
			my $j_col_handle = $signals[$j]->{handle}->get_collection($node);
			my $j_tempID = $signals[$j]->{tempID};
			next if($j_col_handle->count({'tempID'=>$j_tempID})==0);
			if(defined $i_cache{$node}) {
				foreach my $time(@{$i_cache{$node}}) {
					#在ilog的上下三十分钟内是否存在jlog
					if($j_col_handle->count({'tempID'=>$j_tempID,'logTime'=>{'$lte'=>$time+60*60,'$gte'=>$time-60*60}})!=0) {
						$c_cov_cell ++;
					}
				}
			} else {
				my $i_logtimes = [];
				my $i_cursor= $i_handle->get_collection($node)->find({'tempID'=>$i_tempID},{'logTime'=>1});
				while(my $i_record = $i_cursor->next()) {
					my $time = $i_record->{logTime};
					push @$i_logtimes,$time;
					#在ilog的上下三十分钟内是否存在jlog
					if($j_col_handle->count({'tempID'=>$j_tempID,'logTime'=>{'$lte'=>$time+60*60,'$gte'=>$time-60*60}})!=0) {
						$c_cov_cell ++;
					}
				}
				$i_cache{$node} = $i_logtimes;
			}
		}
		push @$c_cov,$c_cov_cell;
	}
	push @$cov_count,$c_cov;
}
my $big_ratio_couple = [];
foreach my $i(0..$#signals){
	printf "sig:%10s count:%10d ","$signals[$i]->{db}:$signals[$i]->{tempID}",$count->[$i];
	foreach my $j(0..$#signals){
		if(print_cov_cell($i,$j)>0.8) {
			push @$big_ratio_couple,[$i,$j];
		}
	}
	print "\n";
}
print "big::::::\n";
foreach my $couple (@$big_ratio_couple) {
	my ($i,$j) = @$couple;
	printf "sig:%10s count:%10d ","$signals[$i]->{db}:$signals[$i]->{tempID}",$count->[$i];
	printf "sig:%10s count:%10d ","$signals[$j]->{db}:$signals[$j]->{tempID}",$count->[$j];
	print_cov_cell($i,$j);
	print "\n";
}
sub print_cov_cell{
	my ($i,$j) = @_;
	my $ratio = 0;
	if($count->[$i]==0) {
		$ratio = 0;
	}else {
		$ratio = $cov_count->[$i][$j]/$count->[$i];
	}
	printf "%10d/%1.4f ",$cov_count->[$i][$j],$ratio;
	return $ratio;
}
